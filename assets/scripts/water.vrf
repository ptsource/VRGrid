<import>
<define>
   <function name="CircleWater" params="vrobj, Nvertices, Xcenter, Ycenter, Zcenter, Rinner, Router">
      vertex_list = vrobj.get_vertices();
      if (vrobj.vertices != (Nvertices*Nvertices) ) {
         vrf.free_array(vertex_list);
         return 0;
      }
      rInc = (Router-Rinner)/(Nvertices-1.0);
      thetaInc = 2.0*math.pi/(Nvertices-1.0);
      vertexCount = 0;
      r = Rinner;
      for k=1 to Nvertices+1 {
         theta = 0.0;
         for j=1 to Nvertices+1 {
            x = r * math.cos(theta) + Xcenter;
            z = r * math.sin(theta) + Zcenter;
            vertex_list.set(vertexCount, x, Ycenter, z);
            theta = theta + thetaInc;
            vertexCount = vertexCount + 1;
        }
        r = r + rInc;
      }
      vrobj.set_vertices(vertex_list);
     vrf.free_array(vertex_list);
   </function>
   <function name="ElbowWater" params="vrobj, Nvertices, Xoffset, Ystart, Yend, Zstart, Zend, Rinit, Rfinal">
      vertex_list = vrobj.get_vertices();
      if (vrobj.vertices != (Nvertices*Nvertices) ) {
        vrf.free_array(vertex_list);
         return 0;
      }
      phiInc = 2.0*math.pi/(Nvertices - 1.0);
      thetaInc = math.pi/(2.0*(Nvertices - 1.0));
      dRc = Rfinal - Rinit;
      dY = Ystart - Yend;
      dZ = Zend - Zstart;
      theta = 0.0;
      vertexCount = 0;
      for k=1 to Nvertices+1 {
         phi = -1.0*math.pi/2.0;
         r1 = Rinit + (dRc * math.sin(theta));
         r2 = dY - ((dY - dZ) * math.sin(theta));
         for j=1 to Nvertices+1 {
      		x = (r1 * math.cos(phi)) + Xoffset;
            y = (r1 * math.sin(phi) * math.cos(theta)) + (r2 * math.cos(theta)) + Yend;
            z = (r1 * math.sin(phi) * math.sin(theta)) + (r2 * math.sin(theta)) + Zstart;
            vertex_list.set(vertexCount, x, y, z);
	         phi = phi + phiInc;
	         vertexCount = vertexCount + 1;
         }
         theta = theta + thetaInc;
      }
      vrobj.set_vertices(vertex_list);
     vrf.free_array(vertex_list);
   </function>
   <function name="ElbowWaterGeneral" params="vrobj, Nvertices, Xoffset, Ystart, Yend, Zstart, Zend, Rinit, Rfinal, thetaDesired">
      vertex_list = vrobj.get_vertices();
      if (vrobj.vertices != (Nvertices*Nvertices) ) {
         vrf.free_array(vertex_list);
         return 0;
      }
      phiInc = 2.0*math.pi/(Nvertices - 1.0);
      thetaInc = thetaDesired/(Nvertices - 1.0);
      dRc = Rfinal - Rinit;
      dY = Ystart - Yend;
      dZ = Zend - Zstart;
      theta = 0.0;
      vertexCount = 0;
      for k=1 to Nvertices+1 {
         phi = -1.0*math.pi/2.0;
         r1 = Rinit + (dRc * math.sin(theta));
         r2 = dY - ((dY - dZ) * math.sin(theta));
         for j=1 to Nvertices+1 {
            x = (r1 * math.cos(phi)) + Xoffset;
            y = (r1 * math.sin(phi) * math.cos(theta)) + (r2 * math.cos(theta)) + Yend;
            z = (r1 * math.sin(phi) * math.sin(theta)) + (r2 * math.sin(theta)) + Zstart;
            vertex_list.set(vertexCount, x, y, z);
	         phi = phi + phiInc;
	         vertexCount = vertexCount + 1;
         }
         theta = theta + thetaInc;
      }
      vrobj.set_vertices(vertex_list);
      vrf.free_array(vertex_list);
   </function>
   <function name="TubeWater" params="vrobj, Nvertices, Xoffset, Yoffset, Zstart, Zend, Rinit, Rfinal">
      vertex_list = vrobj.get_vertices();
      if (vrobj.vertices != (Nvertices*Nvertices) ) {
         vrf.free_array(vertex_list);
         return 0;
      }
      vertexCount = 0;
      thetaInc = 2.0*math.pi/(Nvertices - 2.0);
      dRc = Rfinal - Rinit;
      dZ = Zend - Zstart;
      for k=1 to Nvertices+1 {
         theta = -1.0*math.pi/2.0;
         r1 = Rinit + (dRc * ((k - 1.0)/(Nvertices - 1.0)));
         for j=1 to Nvertices+1 {
            x = (r1 * math.cos(theta)) + Xoffset;
            y = (r1 * math.sin(theta)) + Yoffset;
            z = (dZ * ((k - 1.0)/(Nvertices - 1.0)) ) + Zstart;
            vertex_list.set(vertexCount,x,y,z);
		      theta = theta + thetaInc;
		      vertexCount = vertexCount + 1;
         } 
      } 
      vrobj.set_vertices(vertex_list);
      vrf.free_array(vertex_list);
   </function>
   <function name="TranslateBlockRelative" params="vrobj, Xcenter, Ycenter, Zcenter">
      vertex_list = vrobj.get_vertices();
      vertexMax = vrobj.vertices;
      vertexCount = 0;
      for k=1 to vertexMax+1 {
         x = vertex_list[vertexCount]:x;
         y = vertex_list[vertexCount]:y;
         z = vertex_list[vertexCount]:z;
         vertex_list.set(vertexCount, x+Xcenter, y+Ycenter, z+Zcenter);
         vertexCount = vertexCount + 1;
      }
      vrobj.set_vertices(vertex_list);
     vrf.free_array(vertex_list);
   </function>
   <function name="TranslateBlockAbsolute" params="vrobj, Xcenter, Ycenter, Zcenter">
      vertex_list = vrobj.get_vertices();
      vertexMax = vrobj.vertices;
      xOrg = vrobj.location:x;
      yOrg = vrobj.location:y;
      zOrg = vrobj.location:z;
      vertexCount = 0;
      for k=1 to vertexMax+1 {
         x = vertex_list[vertexCount]:x;
         y = vertex_list[vertexCount]:y;
         z = vertex_list[vertexCount]:z;
         vertex_list.set(vertexCount, x+Xcenter-xOrg, y+Ycenter-yOrg, z+Zcenter-zOrg);
         vertexCount = vertexCount + 1;
      }
      vrobj.set_vertices(vertex_list);
   vrf.free_array(vertex_list);
   </function>
   <function name="getX" params="col">
      return (col - 1.0) * 256.0;
   </function>
   <function name="getZ" params="row">
      return (map.dimensions:rows - row) * 256.0;
   </function>
   <function name="getY" params="lev">
      return (lev * 256.0);
   </function>
</define>
</import>
